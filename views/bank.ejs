<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bank Management - Payroll System</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/bank.css">
    <link rel="stylesheet" href="/css/bank-history.css">
    <style>
        @media print {
            /* Reset the document for printing */
            body {
                margin: 0;
                padding: 0;
                background: white !important;
                font-size: 12pt;
            }
            
            body.printing #reportView {
                display: block !important;
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                width: 100% !important;
                height: auto !important;
                margin: 0 !important;
                padding: 20px !important;
                background-color: white !important;
                z-index: 9999 !important;
                overflow: visible !important;
            }
            
            /* Hide everything except reportView */
            body.printing *:not(#reportView):not(#reportView *) {
                display: none !important;
            }
            
            #reportView {
                display: block !important;
                visibility: visible !important;
                opacity: 1 !important;
            }
            
            #reportView h2 {
                display: block !important;
                margin-bottom: 20px !important;
                font-size: 18pt !important;
                text-align: center !important;
            }
            
            #reportView table {
                display: table !important;
                width: 100% !important;
                border-collapse: collapse !important;
                margin-bottom: 20px !important;
                page-break-inside: auto !important;
            }
            
            #reportView table thead {
                display: table-header-group !important;
            }
            
            #reportView table tbody {
                display: table-row-group !important;
            }
            
            #reportView table th,
            #reportView table td {
                display: table-cell !important;
                padding: 8px !important;
                border: 1px solid #000 !important;
                text-align: left !important;
                page-break-inside: avoid !important;
                font-size: 12pt !important;
            }

            /* Remove any possible hidden overflow that might hide content */
            html, body, #reportView, #reportView * {
                overflow: visible !important;
            }
            
            /* Clean background and remove shadows */
            * {
                box-shadow: none !important;
                text-shadow: none !important;
            }
        }

        /* Make IQD and USD values consistent in font-weight */
        .summary-content .amount {
            font-weight: 600;
        }
        
        /* Regular styling for the report view when not printing */
        #reportView {
            display: none;
            background: white;
            padding: 20px;
            margin: 0 auto;
            max-width: 800px;
        }
        
        #reportView .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        #reportView table th,
        #reportView table td {
            padding: 8px;
            border: 1px solid #ddd;
        }
        
        .section-divider {
            position: relative;
            margin: 3rem 0;
            text-align: center;
        }
        
        .section-divider::before {
            content: "";
            position: absolute;
            left: 0;
            top: 50%;
            width: 100%;
            height: 1px;
            background-color: #dee2e6;
            z-index: 1;
        }
        
        .section-divider h3 {
            position: relative;
            display: inline-block;
            padding: 0 1.5rem;
            background-color: white;
            z-index: 2;
            margin-bottom: 0;
            color: var(--primary-color);
        }
        
        /* Custom Styled Tabs */
        .custom-tabs {
            border-bottom: 2px solid rgba(13, 148, 136, 0.2);
            margin-bottom: 2rem;
            position: relative;
            display: flex;
        }
        
        .custom-tabs .nav-item {
            margin-right: 4px;
        }
        
        .custom-tabs .nav-link {
            color: #475569;
            font-size: 1.1rem;
            font-weight: 600;
            padding: 1rem 1.8rem;
            border: none;
            border-radius: 10px 10px 0 0;
            position: relative;
            transition: all 0.3s ease;
            background-color: rgba(241, 245, 249, 0.7);
        }
        
        .custom-tabs .nav-link:hover {
            color: #0d9488;
            background-color: rgba(241, 245, 249, 0.9);
        }
        
        .custom-tabs .nav-link.active {
            color: #0d9488;
            background-color: #ffffff;
            box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.05);
            border-bottom: none;
        }
        
        .custom-tabs .nav-link.active::after {
            content: '';
            position: absolute;
            left: 0;
            right: 0;
            bottom: -2px;
            height: 3px;
            background: linear-gradient(90deg, #0d9488, #14b8a6);
            border-radius: 3px 3px 0 0;
        }
        
        .custom-tabs .nav-link i {
            font-size: 1.1rem;
            margin-right: 0.5rem;
            vertical-align: -1px;
            color: inherit;
            transition: transform 0.3s ease;
        }
        
        .custom-tabs .nav-link:hover i,
        .custom-tabs .nav-link.active i {
            transform: translateY(-2px);
        }
        
        /* Tab content fade animation */
        .tab-content > .tab-pane.fade {
            transition: opacity 0.3s ease-in-out;
        }
        
        .tab-content > .tab-pane.fade.show {
            opacity: 1;
        }
        
        /* Make transaction history table take full width */
        .history-container {
            width: 100%;
            overflow-x: auto;
        }
        
        .history-container .table {
            width: 100%;
            min-width: 100%;
            table-layout: fixed;
            margin-bottom: 1.5rem;
        }
        
        .history-container .table th, 
        .history-container .table td {
            padding: 1rem;
            vertical-align: middle;
            white-space: normal;
            word-wrap: break-word;
        }
        
        /* Column width adjustments */
        .history-container .table th:nth-child(1) {
            width: 15%;
        }
        .history-container .table th:nth-child(2) {
            width: 12%;
        }
        .history-container .table th:nth-child(3) {
            width: 12%;
        }
        .history-container .table th:nth-child(4) {
            width: 12%;
        }
        .history-container .table th:nth-child(5) {
            width: 10%;
        }
        .history-container .table th:nth-child(6) {
            width: 15%;
        }
        .history-container .table th:nth-child(7) {
            width: 10%;
        }
        .history-container .table th:nth-child(8) {
            width: 14%;
        }
        
        /* New class for full-width history content */
        .full-width-history {
            width: 100%;
            max-width: 1700px; /* Increased to match the 1700px screen size */
            margin: 0 auto; /* Center the content */
        }
        
        /* Additional fixes for wider screens */
        @media (min-width: 1200px) {
            /* Restore constrained width for content */
            .main-content {
                max-width: 1200px;
                padding: 2rem;
                margin-left: 250px;
            }
            
            /* Make transaction history table take appropriate width */
            .history-container {
                width: 100%;
                overflow-x: auto;
            }
            
            /* Override max-width for full-width-history class */
            .full-width-history .history-container,
            .full-width-history .filter-panel,
            .full-width-history .transaction-summary,
            .full-width-history .table {
                width: 100%;
                max-width: 1700px; /* Increased to match the 1700px screen size */
            }
            
            .full-width-history {
                width: 100%;
                max-width: 1700px; /* Increased to match the 1700px screen size */
                margin: 0 auto; /* Center the content */
                padding-left: 1rem;
                padding-right: 1rem;
            }
            
            /* Column width adjustments */
            .history-container .table th:nth-child(1) {
                width: 15%;
            }
            .history-container .table th:nth-child(2) {
                width: 12%;
            }
            .history-container .table th:nth-child(3) {
                width: 12%;
            }
            .history-container .table th:nth-child(4) {
                width: 12%;
            }
            .history-container .table th:nth-child(5) {
                width: 10%;
            }
            .history-container .table th:nth-child(6) {
                width: 15%;
            }
            .history-container .table th:nth-child(7) {
                width: 10%;
            }
            .history-container .table th:nth-child(8) {
                width: 14%;
            }
        }
        
        /* Remove global full-width styles */
        
        
        /* Add styles that apply across all screen sizes */
        .bank-process-section {
            width: 100%;
        }
        
        .transfer-form {
            width: 100%;
        }
        
        #bankCardsContainer {
            width: 100%;
        }

        /* Make only transaction history section take full screen width with margin */
        .full-screen-width-history {
            width: 100%;
            max-width: 100vw;
            margin: 0 auto;
            padding-left: 0;
            padding-right: 0;
        }
        @media (min-width: 1400px) {
            .full-screen-width-history {
                width: calc(100vw - 400px); /* 200px margin on each side */
                max-width: 100vw;
                position: relative;
                left: 50%;
                right: 0;
                margin-left: calc(-50vw + 250px + 200px); /* 250px for sidebar, 200px margin */
                margin-right: 200px;
                padding-left: 0;
                padding-right: 0;
            }
        }
        .full-screen-width-history .history-container,
        .full-screen-width-history .filter-panel,
        .full-screen-width-history .transaction-summary,
        .full-screen-width-history .table {
            width: 100%;
            max-width: 100%;
        }
        .full-screen-width-history .history-container {
            overflow-x: auto;
        }
        .full-screen-width-history .table {
            min-width: 900px;
        }
        @media (max-width: 991px) {
            .full-screen-width-history,
            .full-screen-width-history .history-container,
            .full-screen-width-history .filter-panel,
            .full-screen-width-history .transaction-summary,
            .full-screen-width-history .table {
                width: 100% !important;
                max-width: 100% !important;
                margin-left: 0 !important;
                margin-right: 0 !important;
                left: 0 !important;
            }
            .full-screen-width-history .table {
                min-width: 600px;
            }
        }
        /* Center align the Description column in the transaction history table */
        .history-container .table td:nth-child(6),
        .full-screen-width-history .table td:nth-child(6) {
            text-align: center;
        }
        .history-container .table th:nth-child(6),
        .full-screen-width-history .table th:nth-child(6) {
            text-align: center;
        }
        
        /* Responsive navigation styles - significantly reduced height */
        @media (max-width: 767px) {
            .sidebar {
                padding: 0 !important;
                min-height: auto !important;
            }
            
            .sidebar .d-flex {
                padding: 0.25rem !important;
                margin-bottom: 0 !important;
                align-items: center !important;
                height: auto !important; /* Changed from fixed height to auto */
                max-height: 35px !important; /* Maximum height constraint */
            }
            
            .sidebar h3 {
                font-size: 0.9rem !important;
                margin: 0 !important;
            }
            
            .sidebar nav {
                display: flex !important;
                flex-direction: row !important;
                flex-wrap: wrap !important;
                padding: 0 !important;
                gap: 5px !important;
            }
            
            .sidebar nav a {
                padding: 0.2rem 0.4rem !important;
                margin: 0 !important;
                font-size: 0.8rem !important;
                border-radius: 4px !important;
                line-height: 1 !important;
            }
            
            /* Make toggler button perfectly square */
            .toggler-btn {
                padding: 0 !important;
                width: 28px !important;
                height: 28px !important;
                min-width: 28px !important;
                min-height: 28px !important;
                max-width: 28px !important;
                max-height: 28px !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
                border-radius: 4px !important;
                margin: 0 !important;
            }
            
            .toggler-btn i {
                font-size: 1rem !important;
                line-height: 1 !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
            }
            
            /* Optimize main content spacing on mobile */
            .main-content {
                padding: 0.5rem !important;
                margin-top: 0 !important;
            }
            
            /* Reduce heading size */
            .col.main-content h1 {
                font-size: 1.2rem !important;
                margin-bottom: 0.5rem !important;
                margin-top: 0 !important;
            }
            
            /* Make tab navigation more compact on small screens */
            .custom-tabs .nav-link {
                padding: 0.3rem 0.6rem !important;
                font-size: 0.75rem !important;
            }
            
            /* Reduce tab margins */
            .custom-tabs .nav-item {
                margin-right: 1px !important;
            }
            
            /* Reduce spacing between elements */
            .tab-content {
                margin-top: 0 !important;
            }
            
            .mb-4 {
                margin-bottom: 0.5rem !important;
            }
            
            .mb-3 {
                margin-bottom: 0.25rem !important;
            }
        }

        /* Hide toggler button on larger screens for all pages except bank management */
        @media (min-width: 1101px) {
            .toggler-btn {
                display: none !important;
            }
        }

        /* Global navbar styling to make it bigger */
        .sidebar {
            min-height: 100vh;
            background-color: #0f172a;
            padding: 1.5rem 1rem;
            color: white;
        }
        
        .sidebar h3 {
            font-size: 1.4rem;
            margin-bottom: 1.5rem;
            color: white;
        }
        
        .sidebar nav {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }
        
        .sidebar nav a {
            display: block;
            padding: 0.75rem 1.25rem;
            color: #e2e8f0;
            border-radius: 8px;
            text-decoration: none;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }
        
        .sidebar nav a:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .sidebar nav a.active {
            background-color: #0d9488;
            color: white;
            font-weight: 600;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        /* Make toggler button MUCH bigger */
        .toggler-btn {
            padding: 0.3rem !important;
            width: 48px !important;
            height: 48px !important;
            min-width: 48px !important;
            min-height: 48px !important;
            max-width: 48px !important;
            max-height: 48px !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            border-radius: 8px !important;
            margin: 0 !important;
            background-color: var(--primary-color);
            border: none;
        }
        
        .toggler-btn i {
            font-size: 1.8rem !important;
            line-height: 1 !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
        }
        
        /* Responsive navigation styles - modified breakpoint to 1100px */
        @media (max-width: 1100px) {
            .sidebar {
                padding: 1.5rem !important;
                min-height: auto !important;
            }
            
            .sidebar .d-flex {
                padding: 0.8rem !important;
                margin-bottom: 0.8rem !important;
                align-items: center !important;
                height: auto !important;
                max-height: 60px !important;
            }
            
            .sidebar h3 {
                font-size: 1.4rem !important;
                margin: 0 !important;
                font-weight: 600 !important;
            }
            
            .sidebar nav {
                display: none !important;
            }
            
            .sidebar nav.show {
                display: flex !important;
                flex-direction: column !important;
                flex-wrap: nowrap !important;
                padding: 0.8rem !important;
                gap: 10px !important;
            }
            
            .sidebar nav a {
                padding: 0.8rem 1rem !important;
                margin: 0 !important;
                font-size: 1.2rem !important;
                border-radius: 8px !important;
                line-height: 1.2 !important;
                font-weight: 500 !important;
            }
            
            /* Toggler button styles for mobile */
            .toggler-btn {
                padding: 0.25rem !important;
                width: 36px !important;
                height: 36px !important;
                min-width: 36px !important;
                min-height: 36px !important;
                max-width: 36px !important;
                max-height: 36px !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
                border-radius: 6px !important;
                margin: 0 !important;
            }
            
            .toggler-btn i {
                font-size: 1.25rem !important;
                line-height: 1 !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
            }
            
            /* Optimize main content spacing on mobile */
            .main-content {
                padding: 0.75rem !important;
                margin-top: 0 !important;
            }
            
            /* Reduce heading size */
            .col.main-content h1 {
                font-size: 1.5rem !important;
                margin-bottom: 0.75rem !important;
                margin-top: 0 !important;
            }
            
            /* Make tab navigation more compact on small screens */
            .custom-tabs .nav-link {
                padding: 0.4rem 0.7rem !important;
                font-size: 0.85rem !important;
            }
            
            /* Reduce tab margins */
            .custom-tabs .nav-item {
                margin-right: 2px !important;
            }
            
            /* Reduce spacing between elements */
            .tab-content {
                margin-top: 0.5rem !important;
            }
            
            .mb-4 {
                margin-bottom: 1rem !important;
            }
            
            .mb-3 {
                margin-bottom: 0.75rem !important;
            }
        }

        /* Responsive navigation styles - modified breakpoint to 1100px with BIGGER navbar */
        @media (max-width: 1100px) {
            .sidebar {
                padding: 1.5rem !important;
                min-height: auto !important;
            }
            
            .sidebar .d-flex {
                padding: 0.8rem !important;
                margin-bottom: 0.8rem !important;
                align-items: center !important;
                height: auto !important; 
                max-height: 60px !important;
            }
            
            .sidebar h3 {
                font-size: 1.4rem !important;
                margin: 0 !important;
                font-weight: 600 !important;
            }
            
            .sidebar nav {
                display: none !important;
            }
            
            .sidebar nav.show {
                display: flex !important;
                flex-direction: column !important; /* Changed to column for larger items */
                flex-wrap: nowrap !important;
                padding: 0.8rem !important;
                gap: 10px !important;
            }
            
            .sidebar nav a {
                padding: 0.8rem 1rem !important;
                margin: 0 !important;
                font-size: 1.2rem !important;
                border-radius: 8px !important;
                line-height: 1.2 !important;
                font-weight: 500 !important;
            }
            
            /* Make toggler button MUCH bigger */
            .toggler-btn {
                padding: 0.3rem !important;
                width: 48px !important;
                height: 48px !important;
                min-width: 48px !important;
                min-height: 48px !important;
                max-width: 48px !important;
                max-height: 48px !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
                border-radius: 8px !important;
                margin: 0 !important;
                background-color: #0d9488;
                border: none;
            }
            
            .toggler-btn i {
                font-size: 1.8rem !important;
                line-height: 1 !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
            }
        }
        
        /* Smaller screens need even bigger touch targets */
        @media (max-width: 767px) {
            .toggler-btn {
                width: 50px !important;
                height: 50px !important;
                min-width: 50px !important;
                min-height: 50px !important;
                max-width: 50px !important;
                max-height: 50px !important;
            }
            
            .sidebar nav.show a {
                padding: 0.9rem 1.2rem !important;
                font-size: 1.3rem !important;
                text-align: center !important;
                margin-bottom: 0.3rem !important;
            }
        }

        /* Heading and tab size fixes - ENLARGED */
        .main-content h1 {
            font-size: 2.2rem;
            font-weight: 700;
            color: #0f172a;
            margin-bottom: 1.5rem;
            letter-spacing: -0.5px;
        }
        
        .custom-tabs .nav-link {
            font-size: 1.3rem;
            padding: 1.2rem 2rem;
            font-weight: 600;
        }
        
        .custom-tabs .nav-link i {
            font-size: 1.3rem;
        }
        
        /* Section headings */
        .bank-process-section h3 {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #0f172a;
        }
        
        /* Card titles */
        .card-title {
            font-size: 1.3rem !important;
            font-weight: 600 !important;
        }
        
        /* Form labels */
        .form-floating label {
            font-size: 1.1rem;
        }
        
        /* Form inputs */
        .form-control, .form-select {
            font-size: 1.1rem !important;
            padding: 1rem 1rem !important;
            height: calc(3.5rem + 2px) !important;
        }
        
        .form-floating>.form-control, 
        .form-floating>.form-select {
            height: calc(3.8rem + 2px) !important;
            padding: 1rem 1rem !important;
        }
        
        /* Form buttons */
        .btn-primary {
            font-size: 1.2rem !important;
            padding: 0.8rem 1.5rem !important;
        }
        
        /* Fix floating labels position with larger inputs */
        .form-floating>label {
            padding: 1rem 1rem;
            transform: scale(.85) translateY(-0.8rem) translateX(0.15rem);
        }
        
        .form-floating>.form-control:focus~label,
        .form-floating>.form-control:not(:placeholder-shown)~label,
        .form-floating>.form-select~label {
            transform: scale(.85) translateY(-1.8rem) translateX(0.15rem);
        }
        
        /* Override responsive styles */
        @media (max-width: 1100px) {
            .main-content h1 {
                font-size: 2rem !important;
                margin-bottom: 1rem !important;
            }
            
            .custom-tabs .nav-link {
                padding: 0.9rem 1.5rem !important;
                font-size: 1.2rem !important;
            }
            
            .bank-process-section h3 {
                font-size: 1.6rem !important;
            }
        }
        
        @media (max-width: 767px) {
            .main-content h1 {
                font-size: 1.8rem !important;
            }
            
            .custom-tabs .nav-link {
                padding: 0.7rem 1.2rem !important;
                font-size: 1.1rem !important;
            }
            
            .bank-process-section h3 {
                font-size: 1.5rem !important;
            }
        }
        #bankFilter {
            height: 48px !important;
            min-height: 48px !important;
            padding-top: 0.5rem !important;
            padding-bottom: 0.5rem !important;
            font-size: 1.1rem !important;
            line-height: 1.5 !important;
            display: block;
            box-sizing: border-box;
        }

        /* Table Action Buttons Style */
        .table-action-btn {
            padding: 0.4rem 0.6rem !important;
            font-size: 0.9rem !important;
            line-height: 1 !important;
            height: 32px !important;
            width: 32px !important;
            display: inline-flex !important;
            align-items: center !important;
            justify-content: center !important;
        }
        
        .table-action-btn i {
            font-size: 0.9rem !important;
            line-height: 1 !important;
        }
        
        @media (max-width: 767px) {
            .table-action-btn {
                padding: 0.3rem 0.5rem !important;
                height: 28px !important;
                width: 28px !important;
            }
        }

        /* Toggler button visibility control */
        .toggler-btn {
            display: none !important; /* Hidden by default */
        }
        
        /* Only show toggler button when screen size is less than 1100px */
        @media (max-width: 1100px) {
            .toggler-btn {
                display: flex !important; /* Show on smaller screens */
            }
        }

        .transaction-row.highlighted {
            color: black !important;
        }
        
        .transaction-row.highlighted td {
            background-color: #0062ff1e !important; /* Light blue */
            color: black !important;
        }
        
        /* Change the text color of amount when row is highlighted - direct targeting of spans with inline styles */
        .transaction-row.highlighted td span[style*="color"] {
            color: #0b5ed7 !important; /* darker blue for better contrast */
        }
        
        /* Specifically target green text (text-success) for receive transactions */
        .transaction-row.highlighted td span[style*="#22c55e"] {
            color: #0b5ed7 !important; /* darker blue for better contrast */
        }
        
        /* Keep red color for sent transactions even when highlighted */
        .transaction-row.highlighted td span[style*="#ef4444"] {
            color: #ef4444 !important; /* Keep red color for sent transactions */
        }
        
        /* Original selectors kept for backwards compatibility */
        .transaction-row.highlighted td [data-transaction-type] .text-success,
        .transaction-row.highlighted td .text-success {
            color: #0b5ed7 !important; /* darker blue for better contrast */
        }
        
        .transaction-row.highlighted td [data-transaction-type] .text-danger,
        .transaction-row.highlighted td .text-danger {
            color: #ef4444 !important; /* Keep red color for sent transactions */
        }
        
        .highlighter-icon {
            cursor: pointer;
            margin-left: 10px;
            vertical-align: middle;
            visibility: hidden;
            width: 24px;
            height: 24px;
            transition: transform 0.2s ease;
        }
        
        .highlighter-icon:hover {
            transform: scale(1.2);
        }
        
        .form-check-input {
            width: 20px !important;
            height: 20px !important;
            cursor: pointer;
        }
        
        .form-check-input:checked ~ .highlighter-icon {
            visibility: visible;
        }
    </style>
</head>
<body class="bank-page">
    <div class="container-fluid">
        <div class="row">
            <!-- Navigation Sidebar -->
            <% 
            // Set current path for navigation highlighting
            locals.currentPath = '/bank'; 
            %>
            <%- include('./partials/navigation') %>

            <!-- Main Content -->
            <div class="col main-content">
                <h1 class="mb-3">Bank Management</h1>
                
                <!-- Tab Navigation -->
                <ul class="nav nav-tabs custom-tabs mb-4" id="bankTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="transfer-tab" data-bs-toggle="tab" data-bs-target="#transferTab" type="button" role="tab" aria-controls="transferTab" aria-selected="true">
                            <i class="bi bi-send me-2"></i>Bank Transfer
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#historyTab" type="button" role="tab" aria-controls="historyTab" aria-selected="false">
                            <i class="bi bi-clock-history me-2"></i>Transaction History
                        </button>
                    </li>
                </ul>
                
                <!-- Tab Content -->
                <div class="tab-content" id="bankTabsContent">
                    <!-- Transfer Tab -->
                    <div class="tab-pane fade show active" id="transferTab" role="tabpanel" aria-labelledby="transfer-tab">
                        <!-- Bank Process Section -->
                        <section class="bank-process-section">
                            <!-- Banks Section -->
                            <div class="transfer-form mb-4">
                                <h3 class="mb-4">Select Bank</h3>
                                <div id="bankCardsContainer">
                                    <% if (banks && banks.length > 0) { %>
                                        <% banks.forEach(function(bank) { %>
                                            <div class="card bank-card" data-bank="<%= typeof bank === 'object' ? bank.name : bank %>">
                                                <div class="card-body">
                                                    <h5 class="card-title"><%= typeof bank === 'object' ? bank.name : bank %></h5>
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <div class="col-12">
                                            <p class="text-center text-muted">No banks available. Please <a href="/add-bank">add a bank</a> first.</p>
                                        </div>
                                    <% } %>
                                </div>
                            </div>

                            <div class="transfer-form">
                                <form id="bankForm">
                                    <div class="row g-4">
                                        <!-- First row: Bank name and account name -->
                                        <div class="col-md-6">
                                            <div class="form-floating">
                                                <input type="text" class="form-control" id="bankNameInput" name="bankName" readonly required placeholder="Select a bank">
                                                <label for="bankNameInput">Bank Name</label>
                                            </div>
                                            <% if (!banks || banks.length === 0) { %>
                                                <small class="text-muted">No banks available. Please <a href="/add-bank">add a bank</a> first.</small>
                                            <% } %>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-floating">
                                                <select class="form-select" id="accountNameSelect" name="accountName" required>
                                                    <option value="">Select account</option>
                                                    <% if (accounts && accounts.length > 0) { %>
                                                        <% accounts.forEach(function(account) { %>
                                                            <option value="<%= typeof account === 'object' ? account.name : account %>"><%= typeof account === 'object' ? account.name : account %></option>
                                                        <% }); %>
                                                    <% } %>
                                                </select>
                                                <label for="accountNameSelect">Account Name</label>
                                            </div>
                                            <% if (!accounts || accounts.length === 0) { %>
                                                <small class="text-muted">No accounts available. Please <a href="/add-account">add an account</a> first.</small>
                                            <% } %>
                                        </div>
                                        <!-- Second row: Nusinga and transaction type -->
                                        <div class="col-md-6">
                                            <div class="form-floating">
                                                <input type="text" class="form-control" id="nusingaInput" name="nusinga" placeholder="Enter nusinga">
                                                <label for="nusingaInput">Nusinga</label>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-floating">
                                                <select class="form-select" id="transactionTypeSelect" name="transactionType" required>
                                                    <option value="receive">Receive Money</option>
                                                </select>
                                                <label for="transactionTypeSelect">Transaction Type</label>
                                            </div>
                                        </div>
                                        <!-- Third row: Currency and amount -->
                                        <div class="col-md-6">
                                            <div class="d-flex gap-2 align-items-start">
                                                <div class="form-floating" style="flex: 0 0 120px; min-width: 100px;">
                                                    <select class="form-select" id="currencySelect" name="currency" required>
                                                        <option value="USD" selected>USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                    <label for="currencySelect">Currency</label>
                                                </div>
                                                <div class="form-floating flex-grow-1">
                                                    <input type="number" class="form-control" id="amountInput" name="amount" required placeholder="Enter amount">
                                                    <label for="amountInput">Amount</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <div class="form-floating">
                                                <textarea class="form-control" id="descriptionTextarea" name="description" rows="3" style="min-height: 100px;" placeholder="Describe the transfer (optional)"></textarea>
                                                <label for="descriptionTextarea">Transfer Description</label>
                                            </div>
                                        </div>
                                        <div class="col-12 mt-4">
                                            <button type="submit" class="btn btn-primary w-100 py-3">Process Bank Transfer</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </section>
                    </div>
                    
                    <!-- History Tab -->
                    <div class="tab-pane fade" id="historyTab" role="tabpanel" aria-labelledby="history-tab">
                        <!-- Transaction History Section -->
                        <section class="transaction-history-section full-screen-width-history">
                            <div class="mb-3 no-print d-flex">
                                <button class="btn btn-primary me-2" onclick="printReport()">
                                    <i class="bi bi-printer"></i> Print Report
                                </button>
                                <button class="btn btn-success" onclick="exportToPDF()">
                                    <i class="bi bi-file-pdf"></i> Export to PDF
                                </button>
                            </div>

                            <!-- Redesigned Filter Panel Start -->
                            <div class="filter-panel card shadow-sm mb-4 p-3 p-md-4 border-0">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="bankFilter" class="form-label fw-semibold mb-1"><i class="bi bi-bank2 me-2"></i>Bank</label>
                                        <div class="d-flex align-items-center">
                                            <select id="bankFilter" class="form-select form-select-lg rounded-pill px-4 py-2 bank">
                                                <option value="">All Banks</option>
                                                <% for(let bank of banks) { %>
                                                    <option value="<%= bank.name %>"><%= bank.name %></option>
                                                <% } %>
                                            </select>
                                            <button class="btn btn-outline-secondary rounded-pill ms-2 d-flex align-items-center justify-content-center bank-clear-btn" style="width: 62px; height: 57px;" onclick="clearBankFilter()" type="button" title="Clear Bank">
                                                <i class="bi bi-x-circle"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="dateFilter" class="form-label fw-semibold mb-1"><i class="bi bi-calendar-event me-2"></i>Date</label>
                                        <div class="d-flex align-items-center">
                                            <input type="text" id="dateFilter" class="form-control form-control-lg rounded-pill px-4 py-2" readonly="readonly" style="cursor: pointer;">
                                            <button class="btn btn-outline-secondary rounded-pill ms-2 d-flex align-items-center justify-content-center bank-clear-btn" style="width: 62px; height: 57px;" onclick="clearDateFilter()" type="button" title="Clear Date">
                                                <i class="bi bi-x-circle"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Redesigned Filter Panel End -->

                            <div class="transaction-summary">
                                <div class="row">
                                    <div class="col-12">
                                        <div class="summary-box receive-box">
                                            <div class="summary-icon">
                                                <i class="bi bi-arrow-down-circle"></i>
                                            </div>
                                            <div class="summary-content">
                                                <h3>Total Received</h3>
                                                <%
                                                    var totalReceived = 0;
                                                    if (transactions) {
                                                        totalReceived = transactions
                                                            .filter(function(t) { return t.transactionType === 'receive'; })
                                                            .reduce(function(sum, t) { return sum + parseFloat(t.amount); }, 0);
                                                    }
                                                %>
                                                <div class="amount amount-iqd" style="font-weight: 500; color: #1e293b; font-size: 2rem;">IQD: 0</div>
                                                <div class="amount amount-usd">$<%= totalReceived.toFixed(2) %></div>
                                                <div class="count">
                                                    <%= transactions ? transactions.filter(function(t) { return t.transactionType === 'receive'; }).length : 0 %> Transactions
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="history-container">
                                <table class="table " style="width: 100%;">
                                    <thead style="back">
                                        <tr>
                                            <th style="font-weight: 500;">Date</th>
                                            <th style="font-weight: 500;">Bank</th>
                                            <th style="font-weight: 500;">Nusinga</th>
                                            <th style="font-weight: 500;">Description</th>
                                            <th style="font-weight: 500;">Amount</th>
                                            <th style="font-weight: 500;">Mark</th>
                                            <th style="font-weight: 500;">Edit/Delete</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if (transactions && transactions.length > 0) { %>
                                            <% transactions.forEach(transaction => { %>
                                                <tr onclick="goToTransactionDetails('/transaction/bank/<%= transaction.id %>')" style="cursor: pointer;" class="transaction-row" data-transaction-id="<%= transaction.id %>">
                                                    <td data-full-date="<%= transaction.date %>">
                                                        <%
                                                            var date = new Date(transaction.date);
                                                        %>
                                                        <div style="font-weight: 500; color: #1e293b;">
                                                            <%= date.toLocaleDateString('en-US', {
                                                                weekday: 'short',
                                                                month: 'short',
                                                                day: 'numeric',
                                                                year: 'numeric'
                                                            }) %>
                                                        </div>
                                                        <div style="font-size: 0.85rem; color: #64748b;">
                                                            <%= date.toLocaleTimeString('en-US', {
                                                                hour: '2-digit',
                                                                minute: '2-digit',
                                                                hour12: true
                                                            }) %>
                                                        </div>
                                                    </td>
                                                    <td><%= transaction.bankName %></td>
                                                    <td><%= transaction.nusinga || '-' %></td>
                                                    <td><%= transaction.description ? (transaction.description.length > 30 ? transaction.description.substring(0, 30) + '...' : transaction.description) : '-' %></td>
                                                    <td data-transaction-type="<%= transaction.transactionType %>">
                                                        <% 
                                                            const tax = parseFloat(transaction.tax || 0);
                                                            const amount = parseFloat(transaction.amount);
                                                            const amountAfterTax = Math.max(0, amount - tax);
                                                            
                                                            // Set color based on transaction type
                                                            // For bank transactions, typically all are 'receive', 
                                                            // but adding the logic for future flexibility
                                                            const amountColor = transaction.transactionType === 'receive' ? '#22c55e' : '#ef4444';
                                                            
                                                            if (transaction.currency === 'IQD') { 
                                                        %>
                                                            <span style="color: <%= amountColor %>; font-weight: 500;">IQD <%= Number(amountAfterTax).toLocaleString() %></span>
                                                        <% } else { %>
                                                            <span style="color: <%= amountColor %>; font-weight: 500;">$<%= Number(amountAfterTax).toFixed(2) %></span>
                                                        <% } %>
                                                    </td>
                                                    <td class="text-center" onclick="event.stopPropagation()">
                                                        <div style="display: flex; align-items: center; justify-content: center;">
                                                            <input type="checkbox" class="form-check-input" style="width: 24px; height: 24px;" onchange="toggleHighlight(this, '<%= transaction.id %>')">
                                                            <svg class="highlighter-icon" width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" onclick="toggleRowHighlight('<%= transaction.id %>')">
                                                                <path d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                            </svg>
                                                        </div>
                                                    </td>
                                                    <td class="text-center" onclick="event.stopPropagation()">
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-primary btn-sm me-1 table-action-btn" onclick="showEditModal(event, '<%= JSON.stringify(transaction) %>')">
                                                                <i class="bi bi-pencil"></i>
                                                            </button>
                                                            <button class="btn btn-danger btn-sm table-action-btn" onclick="confirmDelete(event, '<%= transaction.id %>')">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td colspan="7" class="text-center">No transactions found</td>
                                        </tr>
                                        <% } %>
                                    </tbody>
                                </table>

                                <nav aria-label="Transaction history pagination">
                                    <ul class="pagination" id="pagination">
                                    </ul>
                                </nav>
                            </div>

                            <div id="reportView">
                                <h2 class="text-center mb-4">Bank Transaction Report</h2>
                                <p class="report-date text-center mb-4">
                                    Date: <span id="reportDate"></span>
                                </p>
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th style="width: 25%;">Date</th>
                                            <th style="width: 25%;">Amount</th>
                                            <th style="width: 30%;">Account Name</th>
                                            <th style="width: 20%;">Bank Name</th>
                                        </tr>
                                    </thead>
                                    <tbody id="reportTableBody">
                                    </tbody>
                                </table>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="successModalLabel">Transaction Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-4">
                        <i class="bi bi-check-circle text-success" style="font-size: 3rem;"></i>
                    </div>
                    <p class="text-center mb-4" id="successMessage"></p>
                    <div class="transaction-details">
                        <p><strong>Amount:</strong> <span id="modalAmount"></span></p>
                        <p><strong>Bank Name:</strong> <span id="modalBankName"></span></p>
                        <p><strong>Account Name:</strong> <span id="modalAccountName"></span></p>
                        <p><strong>Type:</strong> <span id="modalType"></span></p>
                        <p><strong>Description:</strong> <span id="modalDescription"></span></p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Change Modal -->
    <div class="modal fade" id="statusChangeModal" tabindex="-1" aria-labelledby="statusChangeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="statusChangeModalLabel">
                        <i class="bi bi-arrow-repeat me-2"></i>Change Transaction Status
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="mb-4">
                        <i class="bi bi-question-circle text-primary" style="font-size: 3rem;"></i>
                    </div>
                    <p class="mb-0 fs-5">Do you want to change the status to <br><strong><span id="newStatusText"></span></strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="confirmStatusChange">
                        <i class="bi bi-check2 me-1"></i>Confirm
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-danger text-white border-0">
                    <h5 class="modal-title" id="deleteModalLabel">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>Delete Transaction
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center py-4">
                    <div class="mb-4">
                        <i class="bi bi-trash text-danger" style="font-size: 3.5rem;"></i>
                    </div>
                    <p class="mb-0 fs-5">Are you sure you want to delete this transaction? This action cannot be undone.</p>
                </div>
                <div class="modal-footer border-0 justify-content-center">
                    <button type="button" class="btn btn-outline-secondary px-4" data-bs-dismiss="modal">
                        <i class="bi bi-x me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger px-4" id="confirmDelete">
                        <i class="bi bi-trash me-1"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Transaction Modal -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">
                        <i class="bi bi-pencil me-2"></i>Edit Transaction
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editTransactionForm" method="POST" novalidate>
                        <input type="hidden" id="editTransactionId" name="id">
                        <div class="mb-3">
                            <label for="editAmount" class="form-label">Amount</label>
                            <div class="d-flex align-items-center">
                                <select class="form-select" name="currency" id="editCurrency" style="max-width: 100px;">
                                    <option value="USD">USD</option>
                                    <option value="IQD">IQD</option>
                                </select>
                                <input type="number" class="form-control" id="editAmount" name="amount" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="editTax" class="form-label">Tax</label>
                            <div class="d-flex align-items-center">
                                <span class="input-group-text"><i class="bi bi-cash"></i></span>
                                <input type="number" class="form-control" id="editTax" name="tax" step="0.01" min="0">
                            </div>
                            <small class="form-text text-muted">Enter tax amount in the same currency as the transaction</small>
                        </div>
                        <div class="mb-3">
                            <label for="editBankName" class="form-label">Bank</label>
                            <select class="form-select" id="editBankName" name="bankName" required>
                                <option value="">Select bank</option>
                                <% if (banks && banks.length > 0) { %>
                                    <% banks.forEach(function(bank) { %>
                                        <option value="<%= bank.name %>"><%= bank.name %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editAccountName" class="form-label">Account</label>
                            <select class="form-select" id="editAccountName" name="accountName" required>
                                <option value="">Select account</option>
                                <% if (accounts && accounts.length > 0) { %>
                                    <% accounts.forEach(function(account) { %>
                                        <option value="<%= account.name %>"><%= account.name %></option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editNusinga" class="form-label">Nusinga</label>
                            <input type="text" class="form-control" id="editNusinga" name="nusinga" placeholder="Enter nusinga">
                        </div>
                        <div class="mb-3">
                            <label for="editTransactionType" class="form-label">Transaction Type</label>
                            <select class="form-select" id="editTransactionType" name="transactionType" required>
                                <option value="receive">Receive Money</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" name="description" rows="3" required></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" id="confirmEdit">
                        <i class="bi bi-check2 me-1"></i>Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <!-- Add account data as a script that directly assigns the accounts array -->
    <script>
        window.accountsList = <%- JSON.stringify(accounts || []) %>;
    </script>
    <script src="/js/bank.js"></script>
    <script src="/js/bank-history.js"></script>
    <script src="/js/navbar-toggler.js"></script>
    <script>
        // Override the printReport function with one that creates a new window
        function printReport() {
            try {
                // Create a new window for printing
                const printWindow = window.open('', '_blank', 'width=800,height=600');
                
                if (!printWindow) {
                    alert("Please allow popup windows for printing.");
                    return;
                }
                
                // Get only the highlighted rows that are checked
                let currentRows = [];
                if (typeof filteredRows !== 'undefined' && filteredRows.length > 0) {
                    currentRows = filteredRows.filter(row => 
                        !row.classList.contains('no-transactions') && 
                        row.classList.contains('highlighted') && 
                        row.querySelector('.form-check-input')?.checked
                    );
                } else {
                    // Fallback to all highlighted visible rows if filteredRows is not available
                    currentRows = Array.from(document.querySelectorAll('#historyTab tbody tr.highlighted:not(.no-transactions):not([style*="display: none"])'));
                }
                
                // Generate table rows HTML
                let rowsHTML = '';
                if (currentRows.length > 0) {
                    currentRows.forEach(row => {
                        // Extract bank name
                        const bankName = row.cells[1].textContent.trim();
                        
                        // Extract nusinga name (which is now at index 2)
                        const nusinga = row.cells[2].textContent.trim();
                        
                        // Get the amount with proper formatting - FIXED: amount is at index 4, not 3
                        const amountCell = row.cells[4];
                        const amountSpan = amountCell.querySelector('span');
                        const amountText = amountSpan ? amountSpan.textContent.trim() : amountCell.textContent.trim();
                        
                        // Extract date
                        const dateCell = row.querySelector('td[data-full-date]');
                        const date = new Date(dateCell.getAttribute('data-full-date'));
                        const dateStr = date.toLocaleDateString('en-US', {
                            weekday: 'short',
                            month: 'short',
                            day: 'numeric',
                            year: 'numeric'
                        });
                        
                        // Changed order of columns: Date, Amount, Account Name (Nusinga), Bank Name
                        rowsHTML += `
                            <tr>
                                <td>${dateStr}</td>
                                <td>${amountText}</td>
                                <td>${nusinga}</td>
                                <td>${bankName}</td>
                            </tr>
                        `;
                    });
                } else {
                    rowsHTML = `<tr><td colspan="4" class="text-center">No highlighted transactions found</td></tr>`;
                }
                
                // Format the current date for the report header
                const formattedDate = new Date().toLocaleDateString('en-US', {
                    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
                });
                
                // Build the complete HTML for the print window
                const printContent = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Bank Transaction Report</title>
                        <style>
                            body {
                                font-family: Arial, sans-serif;
                                margin: 20px;
                            }
                            h2 {
                                text-align: center;
                                margin-bottom: 10px;
                            }
                            p.date {
                                text-align: center;
                                margin-bottom: 20px;
                            }
                            table {
                                width: 100%;
                                border-collapse: collapse;
                                margin-bottom: 20px;
                            }
                            th, td {
                                border: 1px solid #000;
                                padding: 8px;
                                text-align: left;
                            }
                            th {
                                background-color: #f2f2f2;
                            }
                            .text-center {
                                text-align: center;
                            }
                        </style>
                    </head>
                    <body>
                        <h2>Bank Transaction Report</h2>
                        <p class="date">Date: ${formattedDate}</p>
                        <table>
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Account Name</th>
                                    <th>Bank Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${rowsHTML}
                            </tbody>
                        </table>
                    </body>
                    </html>
                `;
                
                // Write to the new window and print
                printWindow.document.open();
                printWindow.document.write(printContent);
                printWindow.document.close();
                
                // Wait for content to load before printing
                printWindow.onload = function() {
                    setTimeout(function() {
                        printWindow.print();
                        printWindow.close();
                    }, 250);
                };
            } catch (error) {
                console.error('Error preparing print report:', error);
                alert('Error preparing report for printing. Please try again.');
            }
        }

        // Export to PDF function
        function exportToPDF() {
            try {
                const reportView = document.getElementById('reportView');
                const reportTableBody = document.getElementById('reportTableBody');
                const reportDateElement = document.getElementById('reportDate');
                
                // Prepare report content similar to printReport function
                reportTableBody.innerHTML = '';
                const formattedDate = new Date().toLocaleDateString('en-US', {
                    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
                });
                reportDateElement.textContent = formattedDate;
                
                // Get only the highlighted rows that are checked
                let currentRows = [];
                if (typeof filteredRows !== 'undefined' && filteredRows.length > 0) {
                    currentRows = filteredRows.filter(row => 
                        !row.classList.contains('no-transactions') && 
                        row.classList.contains('highlighted') && 
                        row.querySelector('.form-check-input')?.checked
                    );
                } else {
                    // Fallback to all highlighted visible rows if filteredRows is not available
                    currentRows = Array.from(document.querySelectorAll('#historyTab tbody tr.highlighted:not(.no-transactions):not([style*="display: none"])'));
                }
                
                if (currentRows.length > 0) {
                    currentRows.forEach(row => {
                        // Extract bank name
                        const bankName = row.cells[1].textContent.trim();
                        
                        // Extract nusinga name (which is now at index 2)
                        const nusinga = row.cells[2].textContent.trim();
                        
                        // Get the amount with proper formatting - FIXED: amount is at index 4, not 3
                        const amountCell = row.cells[4];
                        const amountSpan = amountCell.querySelector('span');
                        const amountText = amountSpan ? amountSpan.textContent.trim() : amountCell.textContent.trim();
                        
                        // Extract date - use only month, day, and year, not the exact time
                        const dateCell = row.querySelector('td[data-full-date]');
                        const date = new Date(dateCell.getAttribute('data-full-date'));
                        const dateStr = date.toLocaleDateString('en-US', {
                            month: 'short', day: 'numeric', year: 'numeric'
                        });
                        
                        const newRow = document.createElement('tr');
                        newRow.innerHTML = `
                            <td style="border: 1px solid black; border-collapse: collapse; padding: 8px;">${dateStr}</td>
                            <td style="border: 1px solid black; border-collapse: collapse; padding: 8px;">${amountText}</td>
                            <td style="border: 1px solid black; border-collapse: collapse; padding: 8px;">${nusinga}</td>
                            <td style="border: 1px solid black; border-collapse: collapse; padding: 8px;">${bankName}</td>
                        `;
                        reportTableBody.appendChild(newRow);
                    });
                } else {
                    const noDataRow = document.createElement('tr');
                    noDataRow.innerHTML = `<td colspan="4" style="border: 1px solid black; border-collapse: collapse; padding: 8px; text-align: center;">No highlighted transactions found</td>`;
                    reportTableBody.appendChild(noDataRow);
                }
                
                // Apply additional styles to ensure table borders are visible in PDF
                const reportTable = reportView.querySelector('table');
                reportTable.style.borderCollapse = 'collapse';
                reportTable.style.width = '100%';
                reportTable.style.border = '1px solid black';
                
                // Apply styles to table headers
                const headerCells = reportTable.querySelectorAll('th');
                headerCells.forEach(cell => {
                    cell.style.border = '1px solid black';
                    cell.style.borderCollapse = 'collapse';
                    cell.style.padding = '8px';
                    cell.style.backgroundColor = '#f2f2f2';
                    cell.style.fontWeight = 'bold';
                });
                
                // Add extra CSS to the report view to ensure borders are displayed properly
                const style = document.createElement('style');
                style.textContent = `
                    #reportView table, #reportView th, #reportView td {
                        border: 1px solid black !important;
                        border-collapse: collapse !important;
                    }
                    #reportView table {
                        width: 100% !important;
                    }
                `;
                reportView.appendChild(style);
                
                // Make the report view visible for capturing
                reportView.style.display = 'block';
                
                // Configure pdf options
                const opt = {
                    margin: [5, 2, 15, 8], // [top, right, bottom, left] - further decreased left margin from -5 to -10
                    filename: 'bank_report_' + new Date().toISOString().split('T')[0] + '.pdf',
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { 
                        scale: 2,
                        scrollY: -window.scrollY, // Ensure we capture entire content including bottom
                        windowHeight: document.documentElement.offsetHeight + window.scrollY,
                        useCORS: true,
                        logging: false
                    },
                    jsPDF: { 
                        unit: 'mm', 
                        format: 'a4', 
                        orientation: 'portrait',
                        compress: true,
                        putOnlyUsedFonts: true
                    }
                };
                
                // Use html2pdf to generate and download PDF
                setTimeout(() => {
                    html2pdf().from(reportView).set(opt).save().then(function() {
                        // Hide the report view after PDF is generated
                        setTimeout(() => { 
                            reportView.style.display = 'none'; 
                            // Remove the added style element
                            const addedStyle = reportView.querySelector('style');
                            if (addedStyle) {
                                addedStyle.remove();
                            }
                        }, 500);
                    });
                }, 250);
                
            } catch (error) {
                console.error('Error exporting to PDF:', error);
                alert('Error preparing report for PDF export. Please try again.');
                document.getElementById('reportView').style.display = 'none';
            }
        }

        // Handle URL parameters for tab switching
        document.addEventListener('DOMContentLoaded', function() {
            // Check for tab parameter in URL
            const urlParams = new URLSearchParams(window.location.search);
            const tabParam = urlParams.get('tab');
            
            // If history tab is specified in URL or activeTab from server is history
            if (tabParam === 'history' || <%= typeof activeTab !== 'undefined' && activeTab === 'history' %>) {
                document.getElementById('history-tab').click();
            }
            
            // Update form action to include the current tab
            const statusForms = document.querySelectorAll('form[action^="/toggle-bank-status/"]');
            statusForms.forEach(form => {
                const returnUrlInput = form.querySelector('input[name="returnUrl"]');
                if (returnUrlInput) {
                    const activeTab = document.querySelector('.nav-link.active').getAttribute('id').split('-')[0];
                    let returnUrl = `/bank?tab=${activeTab}`;
                    
                    // Add date parameter if present
                    if (urlParams.has('date')) {
                        returnUrl += `&date=${urlParams.get('date')}`;
                    }
                    
                    returnUrlInput.value = returnUrl;
                }
            });

            // Add click event listener to tab buttons to update URL 
            document.querySelectorAll('.nav-link').forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabId = this.getAttribute('id');
                    const tabName = tabId.split('-')[0]; // 'transfer' or 'history'
                    const currentUrl = new URL(window.location.href);
                    currentUrl.searchParams.set('tab', tabName);
                    history.pushState({}, '', currentUrl.toString());
                    
                    // Update form return URLs when changing tabs
                    const statusForms = document.querySelectorAll('form[action^="/toggle-bank-status/"]');
                    statusForms.forEach(form => {
                        const returnUrlInput = form.querySelector('input[name="returnUrl"]');
                        if (returnUrlInput) {
                            let returnUrl = `/bank?tab=${tabName}`;
                            if (currentUrl.searchParams.has('date')) {
                                returnUrl += `&date=${currentUrl.searchParams.get('date')}`;
                            }
                            returnUrlInput.value = returnUrl;
                        }
                    });
                });
            });
            
            // Load saved row states
            loadRowStates();
        });

        // Function to toggle row highlight and save state
        function toggleHighlight(checkbox, transactionId) {
            const row = document.querySelector(`.transaction-row[data-transaction-id="${transactionId}"]`);
            const highlighterIcon = row.querySelector('.highlighter-icon');
            
            if (checkbox.checked) {
                // Only show the highlighter icon when checkbox is checked
                highlighterIcon.style.visibility = 'visible';
                // Save checkbox state
                saveRowState(transactionId, 'checked', true);
            } else {
                // Hide the highlighter icon and remove highlighting when checkbox is unchecked
                highlighterIcon.style.visibility = 'hidden';
                row.classList.remove('highlighted');
                // Save states (unchecked and not highlighted)
                saveRowState(transactionId, 'checked', false);
                saveRowState(transactionId, 'highlighted', false);
            }
            
            // Update the summary totals after changing checkbox state
            if (typeof updateSummary === 'function') {
                updateSummary();
            }
        }

        // Function to toggle highlighting when clicking the highlighter icon
        function toggleRowHighlight(transactionId) {
            const row = document.querySelector(`.transaction-row[data-transaction-id="${transactionId}"]`);
            const checkbox = row.querySelector('.form-check-input');
            
            if (checkbox.checked) {
                // Toggle the highlighted class when the highlighter icon is clicked
                const isHighlighted = row.classList.toggle('highlighted');
                // Save highlighted state
                saveRowState(transactionId, 'highlighted', isHighlighted);
                
                // Update the summary totals after changing highlight state
                if (typeof updateSummary === 'function') {
                    updateSummary();
                }
            }
        }
        
        // Function to save row state to localStorage
        function saveRowState(transactionId, stateType, value) {
            const key = `bank_row_${stateType}_${transactionId}`;
            localStorage.setItem(key, value);
        }
        
        // Function to load row state from localStorage
        function loadRowStates() {
            document.querySelectorAll('.transaction-row').forEach(row => {
                const transactionId = row.getAttribute('data-transaction-id');
                const checkbox = row.querySelector('.form-check-input');
                const highlighterIcon = row.querySelector('.highlighter-icon');
                
                // Check if we have saved state for this row
                const isChecked = localStorage.getItem(`bank_row_checked_${transactionId}`) === 'true';
                const isHighlighted = localStorage.getItem(`bank_row_highlighted_${transactionId}`) === 'true';
                
                if (isChecked) {
                    checkbox.checked = true;
                    highlighterIcon.style.visibility = 'visible';
                }
                
                if (isHighlighted && isChecked) {
                    row.classList.add('highlighted');
                }
            });
            
            // Update the summary totals after loading saved states
            if (typeof updateSummary === 'function') {
                updateSummary();
            }
        }

        // Auto-sort transactions by bank name on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Sort transactions by bank name after page loads
            if (typeof sortTransactions === 'function') {
                setTimeout(() => {
                    sortTransactions('bank');
                }, 200); // Small delay to ensure DOM is fully loaded
            }
        });
    </script>
    
    <style>
        /* Sortable table header styles */
        .sortable-header {
            display: flex;
            align-items: center;
            justify-content: flex-start; /* Changed from space-between to flex-start */
            cursor: pointer;
            user-select: none;
            padding: 8px 0;
        }
        
        .sortable-header:hover {
            color: #0d9488;
        }
        
        .sort-indicator {
            margin-left: 3px; /* Reduced from 5px to 3px */
            font-size: 0.8em;
            opacity: 0.7;
            transition: transform 0.2s ease;
        }
        
        .sortable-header:hover .sort-indicator {
            opacity: 1;
            transform: translateY(-2px);
        }
    </style>
</body>
</html>